
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 65)
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import parsers.ParserId;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.Token;
import errors.GestionErroresTiny;
import tree.*;
import tree.estructuras.*;
import tree.expresiones.*;
import tree.instrucciones.*;
import tree.variables.*;

/** CUP v0.11b 20150326 (SVN rev 65) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\005\000\002\006" +
    "\005\000\002\006\004\000\002\007\006\000\002\007\005" +
    "\000\002\010\004\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\003" +
    "\004\000\002\003\003\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\010\000" +
    "\002\025\007\000\002\026\010\000\002\026\007\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\003\000\002\030\004\000\002\030\005" +
    "\000\002\030\006\000\002\004\004\000\002\004\003\000" +
    "\002\031\004\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\007\000\002\033\006\000\002\035" +
    "\003\000\002\035\005\000\002\022\005\000\002\034\007" +
    "\000\002\034\006\000\002\005\005\000\002\005\004\000" +
    "\002\036\005\000\002\036\003\000\002\037\005\000\002" +
    "\037\003\000\002\040\005\000\002\040\003\000\002\041" +
    "\005\000\002\041\003\000\002\042\004\000\002\042\003" +
    "\000\002\043\003\000\002\043\006\000\002\043\005\000" +
    "\002\043\003\000\002\043\005\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\050\003\000\002" +
    "\051\003\000\002\051\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\052\003" +
    "\000\002\052\004\000\002\060\003\000\002\060\005\000" +
    "\002\012\003\000\002\020\005\000\002\020\006\000\002" +
    "\053\004\000\002\053\003\000\002\054\005\000\002\055" +
    "\004\000\002\055\003\000\002\056\005\000\002\013\006" +
    "\000\002\021\007\000\002\014\005\000\002\015\007\000" +
    "\002\016\012\000\002\016\011\000\002\057\007\000\002" +
    "\057\006\000\002\017\007\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\004\005\001\002\000\004\002\276\001" +
    "\002\000\016\005\ufff1\016\245\017\035\020\016\021\015" +
    "\022\037\001\002\000\004\005\007\001\002\000\006\006" +
    "\uffdf\056\215\001\002\000\004\006\012\001\002\000\004" +
    "\002\000\001\002\000\026\007\021\017\035\020\016\021" +
    "\015\022\037\046\025\050\020\051\024\055\026\056\033" +
    "\001\002\000\032\007\ufffa\011\ufffa\017\035\020\016\021" +
    "\015\022\037\023\ufffa\046\025\050\020\051\024\055\026" +
    "\056\033\001\002\000\004\045\205\001\002\000\014\013" +
    "\uffe6\015\uffe6\043\uffe6\055\uffe6\056\uffe6\001\002\000\014" +
    "\013\uffe7\015\uffe7\043\uffe7\055\uffe7\056\uffe7\001\002\000" +
    "\032\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\046\ufff9\050\ufff9\051\ufff9\055\ufff9\056\ufff9\001" +
    "\002\000\004\012\201\001\002\000\004\002\uffd2\001\002" +
    "\000\004\007\200\001\002\000\032\007\ufff6\011\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\046\ufff6\050\ufff6" +
    "\051\ufff6\055\ufff6\056\ufff6\001\002\000\004\012\161\001" +
    "\002\000\004\012\155\001\002\000\052\013\uffae\014\uffae" +
    "\015\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\043\150\044\uffae\045\uffae\001\002\000" +
    "\006\043\137\055\135\001\002\000\032\007\uffaa\011\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\046\uffaa\050" +
    "\uffaa\051\uffaa\055\uffaa\056\uffaa\001\002\000\032\007\ufff4" +
    "\011\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\046" +
    "\ufff4\050\ufff4\051\ufff4\055\ufff4\056\ufff4\001\002\000\032" +
    "\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\046\ufff5\050\ufff5\051\ufff5\055\ufff5\056\ufff5\001\002" +
    "\000\004\012\047\001\002\000\032\007\ufff3\011\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\046\ufff3\050\ufff3" +
    "\051\ufff3\055\ufff3\056\ufff3\001\002\000\014\013\uffe8\015" +
    "\uffe8\043\uffe8\055\uffe8\056\uffe8\001\002\000\034\007\ufff7" +
    "\011\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\046" +
    "\ufff7\047\041\050\ufff7\051\ufff7\055\ufff7\056\ufff7\001\002" +
    "\000\014\013\uffe5\015\uffe5\043\uffe5\055\uffe5\056\uffe5\001" +
    "\002\000\032\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\046\ufff8\050\ufff8\051\ufff8\055\ufff8\056" +
    "\ufff8\001\002\000\004\010\043\001\002\000\032\007\uff9f" +
    "\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\046" +
    "\uff9f\050\uff9f\051\uff9f\055\uff9f\056\uff9f\001\002\000\026" +
    "\011\045\017\035\020\016\021\015\022\037\046\025\050" +
    "\020\051\024\055\026\056\033\001\002\000\004\011\046" +
    "\001\002\000\042\006\ufffe\007\ufffe\011\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\055\ufffe\056\ufffe\001\002\000" +
    "\042\006\uffff\007\uffff\011\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\023\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\055\uffff\056\uffff\001\002\000\026\012\066" +
    "\013\072\033\052\042\056\055\026\056\067\057\051\060" +
    "\054\061\050\062\070\001\002\000\046\013\uffb2\014\uffb2" +
    "\015\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\044\uffb2\001\002\000\046\013\uffb0\014" +
    "\uffb0\015\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\044\uffb0\001\002\000\024\012\uffb4" +
    "\033\uffb4\042\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\001\002\000\046\013\uffc7\014\uffc7\015\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\044\uffc7\001\002\000\046\013\uffaf\014\uffaf\015" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\044\uffaf\001\002\000\046\013\uffc4\014\uffc4" +
    "\015\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\044\uffc4\001\002\000\024\012\uffb3\033" +
    "\uffb3\042\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\001\002\000\046\013\uffc8\014\uffc8\015\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\044\uffc8\001\002\000\046\013\uffca\014\uffca\015\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\133\044\uffca\001\002\000\044\013\uffcc\014\uffcc\015" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\130\036\127\037\124\040" +
    "\126\044\uffcc\001\002\000\006\013\uffac\015\122\001\002" +
    "\000\034\013\uffce\014\uffce\015\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\115\033\117\034\120" +
    "\044\uffce\001\002\000\026\013\uffd0\014\uffd0\015\uffd0\024" +
    "\107\025\113\026\110\027\105\030\106\031\111\044\uffd0" +
    "\001\002\000\004\013\103\001\002\000\024\012\066\033" +
    "\052\042\056\055\026\056\067\057\051\060\054\061\050" +
    "\062\070\001\002\000\004\012\075\001\002\000\046\013" +
    "\uffb1\014\uffb1\015\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\044\uffb1\001\002\000\024" +
    "\012\066\033\052\042\056\055\026\056\067\057\051\060" +
    "\054\061\050\062\070\001\002\000\004\014\073\001\002" +
    "\000\032\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\046\uff98\050\uff98\051\uff98\055\uff98\056\uff98" +
    "\001\002\000\046\013\uffc9\014\uffc9\015\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\044" +
    "\uffc9\001\002\000\026\012\066\013\077\033\052\042\056" +
    "\055\026\056\067\057\051\060\054\061\050\062\070\001" +
    "\002\000\004\013\100\001\002\000\046\013\uffc5\014\uffc5" +
    "\015\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\044\uffc5\001\002\000\046\013\uffc6\014" +
    "\uffc6\015\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\044\uffc6\001\002\000\004\013\102" +
    "\001\002\000\046\013\uffc3\014\uffc3\015\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\044" +
    "\uffc3\001\002\000\004\014\104\001\002\000\032\007\uff99" +
    "\011\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\046" +
    "\uff99\050\uff99\051\uff99\055\uff99\056\uff99\001\002\000\024" +
    "\012\uffbf\033\uffbf\042\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\001\002\000\024\012\uffbe\033\uffbe" +
    "\042\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\001\002\000\024\012\uffc2\033\uffc2\042\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000" +
    "\024\012\uffc0\033\uffc0\042\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\001\002\000\024\012\uffbd\033" +
    "\uffbd\042\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\001\002\000\024\012\066\033\052\042\056\055" +
    "\026\056\067\057\051\060\054\061\050\062\070\001\002" +
    "\000\024\012\uffc1\033\uffc1\042\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000\012\013\uffd1" +
    "\014\uffd1\015\uffd1\044\uffd1\001\002\000\024\012\uffbc\033" +
    "\uffbc\042\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\001\002\000\024\012\066\033\052\042\056\055" +
    "\026\056\067\057\051\060\054\061\050\062\070\001\002" +
    "\000\024\012\uffbb\033\uffbb\042\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000\024\012\uffba" +
    "\033\uffba\042\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\001\002\000\026\013\uffcf\014\uffcf\015\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\044" +
    "\uffcf\001\002\000\024\012\066\033\052\042\056\055\026" +
    "\056\067\057\051\060\054\061\050\062\070\001\002\000" +
    "\004\013\uffab\001\002\000\024\012\uffb7\033\uffb7\042\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\001" +
    "\002\000\024\012\066\033\052\042\056\055\026\056\067" +
    "\057\051\060\054\061\050\062\070\001\002\000\024\012" +
    "\uffb6\033\uffb6\042\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\001\002\000\024\012\uffb8\033\uffb8\042" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\001\002\000\024\012\uffb9\033\uffb9\042\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000\034" +
    "\013\uffcd\014\uffcd\015\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\044\uffcd" +
    "\001\002\000\024\012\066\033\052\042\056\055\026\056" +
    "\067\057\051\060\054\061\050\062\070\001\002\000\024" +
    "\012\uffb5\033\uffb5\042\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\001\002\000\044\013\uffcb\014\uffcb" +
    "\015\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\044\uffcb\001\002\000\004\014\146\001\002\000" +
    "\004\055\144\001\002\000\004\061\142\001\002\000\012" +
    "\013\uffa6\015\uffa6\043\137\055\uffa6\001\002\000\010\013" +
    "\uffa7\015\uffa7\055\uffa7\001\002\000\004\044\143\001\002" +
    "\000\012\013\uffa5\015\uffa5\043\uffa5\055\uffa5\001\002\000" +
    "\004\014\145\001\002\000\032\007\uffa8\011\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\046\uffa8\050\uffa8\051" +
    "\uffa8\055\uffa8\056\uffa8\001\002\000\032\007\uffa9\011\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\046\uffa9\050" +
    "\uffa9\051\uffa9\055\uffa9\056\uffa9\001\002\000\050\013\uffad" +
    "\014\uffad\015\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\044\uffad\045\uffad\001\002\000" +
    "\024\012\066\033\052\042\056\055\026\056\067\057\051" +
    "\060\054\061\050\062\070\001\002\000\052\013\uffa3\014" +
    "\uffa3\015\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\043\150\044\uffa3\045\uffa3\001\002" +
    "\000\050\013\uffa4\014\uffa4\015\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\044\uffa4\045" +
    "\uffa4\001\002\000\004\044\154\001\002\000\052\013\uffa2" +
    "\014\uffa2\015\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2\001" +
    "\002\000\024\012\066\033\052\042\056\055\026\056\067" +
    "\057\051\060\054\061\050\062\070\001\002\000\004\013" +
    "\157\001\002\000\004\010\043\001\002\000\034\007\uffa0" +
    "\011\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\055\uffa0\056\uffa0\001\002" +
    "\000\024\012\066\033\052\042\056\055\026\056\067\057" +
    "\051\060\054\061\050\062\070\001\002\000\004\013\163" +
    "\001\002\000\006\052\166\053\164\001\002\000\004\054" +
    "\176\001\002\000\004\053\173\001\002\000\004\061\167" +
    "\001\002\000\004\054\170\001\002\000\004\010\043\001" +
    "\002\000\006\052\166\053\uff9a\001\002\000\004\053\uff9b" +
    "\001\002\000\004\054\174\001\002\000\004\010\043\001" +
    "\002\000\032\007\uff9d\011\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\046\uff9d\050\uff9d\051\uff9d\055\uff9d\056" +
    "\uff9d\001\002\000\004\010\043\001\002\000\032\007\uff9c" +
    "\011\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\046" +
    "\uff9c\050\uff9c\051\uff9c\055\uff9c\056\uff9c\001\002\000\004" +
    "\002\uffd3\001\002\000\024\012\066\033\052\042\056\055" +
    "\026\056\067\057\051\060\054\061\050\062\070\001\002" +
    "\000\004\013\203\001\002\000\004\010\043\001\002\000" +
    "\032\007\uff9e\011\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\046\uff9e\050\uff9e\051\uff9e\055\uff9e\056\uff9e\001" +
    "\002\000\024\012\066\033\052\042\056\055\026\056\067" +
    "\057\051\060\054\061\050\062\070\001\002\000\004\014" +
    "\207\001\002\000\032\007\uffa1\011\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\046\uffa1\050\uffa1\051\uffa1\055" +
    "\uffa1\056\uffa1\001\002\000\010\007\ufffb\011\ufffb\023\ufffb" +
    "\001\002\000\004\006\uffe0\001\002\000\006\006\uffdc\056" +
    "\uffdc\001\002\000\006\006\uffdb\056\uffdb\001\002\000\006" +
    "\006\uffdd\056\215\001\002\000\004\012\216\001\002\000" +
    "\006\013\221\055\217\001\002\000\006\013\uffd8\015\240" +
    "\001\002\000\004\013\235\001\002\000\004\010\224\001" +
    "\002\000\006\006\uffd4\056\uffd4\001\002\000\006\006\uffd9" +
    "\056\uffd9\001\002\000\030\011\045\017\035\020\016\021" +
    "\015\022\037\023\226\046\025\050\020\051\024\055\026" +
    "\056\033\001\002\000\006\011\046\023\226\001\002\000" +
    "\024\012\066\033\052\042\056\055\026\056\067\057\051" +
    "\060\054\061\050\062\070\001\002\000\004\011\230\001" +
    "\002\000\006\006\ufffc\056\ufffc\001\002\000\004\014\232" +
    "\001\002\000\004\011\uffd6\001\002\000\004\011\234\001" +
    "\002\000\006\006\ufffd\056\ufffd\001\002\000\004\010\224" +
    "\001\002\000\006\006\uffd5\056\uffd5\001\002\000\006\006" +
    "\uffda\056\uffda\001\002\000\004\055\217\001\002\000\004" +
    "\013\uffd7\001\002\000\004\006\uffde\001\002\000\016\005" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\001\002" +
    "\000\016\005\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\001\002\000\004\056\267\001\002\000\004\056\252" +
    "\001\002\000\016\005\uffef\016\245\017\035\020\016\021" +
    "\015\022\037\001\002\000\004\005\ufff2\001\002\000\004" +
    "\005\ufff0\001\002\000\004\012\253\001\002\000\014\013" +
    "\256\017\035\020\016\021\015\022\037\001\002\000\004" +
    "\013\265\001\002\000\010\013\uffe4\015\260\043\137\001" +
    "\002\000\004\014\257\001\002\000\016\005\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\001\002\000\012\017" +
    "\035\020\016\021\015\022\037\001\002\000\006\013\uffe3" +
    "\015\262\001\002\000\012\017\035\020\016\021\015\022" +
    "\037\001\002\000\004\013\uffe1\001\002\000\004\013\uffe2" +
    "\001\002\000\004\014\266\001\002\000\016\005\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\001\002\000\004" +
    "\012\270\001\002\000\014\013\272\017\035\020\016\021" +
    "\015\022\037\001\002\000\004\013\274\001\002\000\004" +
    "\014\273\001\002\000\016\005\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\001\002\000\004\014\275\001\002" +
    "\000\016\005\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\014\023\247\024\246\025\243\026\242\027\245" +
    "\001\001\000\004\004\007\001\001\000\012\031\210\032" +
    "\213\033\211\034\212\001\001\000\004\005\010\001\001" +
    "\000\002\001\001\000\032\010\021\011\012\012\016\013" +
    "\037\014\022\015\031\016\030\017\033\020\027\021\035" +
    "\027\026\052\013\001\001\000\032\010\207\011\012\012" +
    "\016\013\037\014\022\015\031\016\030\017\033\020\027" +
    "\021\035\027\026\052\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\146" +
    "\056\150\001\001\000\006\053\135\054\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\041" +
    "\001\001\000\002\001\001\000\032\010\043\011\012\012" +
    "\016\013\037\014\022\015\031\016\030\017\033\020\027" +
    "\021\035\027\026\052\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\036\061\037\063" +
    "\040\062\041\060\042\057\043\056\044\054\051\070\052" +
    "\052\060\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\131\001\001\000\004\047\124\001\001\000\002\001" +
    "\001\000\004\046\115\001\001\000\004\045\111\001\001" +
    "\000\002\001\001\000\024\036\100\037\063\040\062\041" +
    "\060\042\057\043\056\044\054\051\070\052\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\073\043" +
    "\056\044\054\051\070\052\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\036\061\037" +
    "\063\040\062\041\060\042\057\043\056\044\054\051\070" +
    "\052\052\060\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\036\113\037\063\040\062\041\060\042" +
    "\057\043\056\044\054\051\070\052\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\037" +
    "\120\040\062\041\060\042\057\043\056\044\054\051\070" +
    "\052\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\036\061\037\063\040\062\041\060" +
    "\042\057\043\056\044\054\051\070\052\052\060\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\040\130" +
    "\041\060\042\057\043\056\044\054\051\070\052\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\041\133\042\057\043\056\044" +
    "\054\051\070\052\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\140\054\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\036\152\037\063\040\062\041\060\042\057\043\056\044" +
    "\054\051\070\052\052\001\001\000\006\055\151\056\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\036\155\037\063\040\062\041\060\042\057" +
    "\043\056\044\054\051\070\052\052\001\001\000\002\001" +
    "\001\000\004\006\157\001\001\000\002\001\001\000\024" +
    "\036\161\037\063\040\062\041\060\042\057\043\056\044" +
    "\054\051\070\052\052\001\001\000\002\001\001\000\004" +
    "\057\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\170\001\001" +
    "\000\004\057\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\174\001\001\000\002\001\001\000\004" +
    "\006\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\036\201\037\063\040\062\041\060\042\057\043\056" +
    "\044\054\051\070\052\052\001\001\000\002\001\001\000" +
    "\004\006\203\001\001\000\002\001\001\000\024\036\205" +
    "\037\063\040\062\041\060\042\057\043\056\044\054\051" +
    "\070\052\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\241\032\213\033\211\034\212" +
    "\001\001\000\002\001\001\000\004\035\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\221\007\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\010" +
    "\224\011\012\012\016\013\037\014\022\015\031\016\030" +
    "\017\033\020\027\021\035\022\226\027\026\052\013\001" +
    "\001\000\004\022\232\001\001\000\024\036\230\037\063" +
    "\040\062\041\060\042\057\043\056\044\054\051\070\052" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\235\007\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\250\024" +
    "\246\025\243\026\242\027\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\254\030" +
    "\253\001\001\000\002\001\001\000\006\053\260\054\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\254\030\263\001\001\000\002\001\001\000\006\027\254" +
    "\030\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\254\030\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	public void syntax_error(Symbol unidadLexica) {
		errores.errorSintactico((UnidadLexica)unidadLexica);
	}

	private GestionErroresTiny errores;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ARCHIVO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoArchivo start_val = (NodoArchivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ARCHIVO ::= BDECLARE BDEFINE BMAIN 
            {
              NodoArchivo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoDeclare n1 = (NodoDeclare)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoDefine n2 = (NodoDefine)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n3 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoArchivo(n1, n2, n3); ParserId.diTree(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARCHIVO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUEI ::= LLAVEAPERTURA INSTRUCCIONES LLAVECIERRE 
            {
              NodoBloque RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBloque(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUEI ::= LLAVEAPERTURA LLAVECIERRE 
            {
              NodoBloque RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBloque(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUER ::= LLAVEAPERTURA INSTRUCCIONES BRETURN LLAVECIERRE 
            {
              NodoBloqueReturn RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoInstruccion n1 = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoReturn n2 = (NodoReturn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBloqueReturn(n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUER ::= LLAVEAPERTURA BRETURN LLAVECIERRE 
            {
              NodoBloqueReturn RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoReturn n = (NodoReturn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBloqueReturn(null, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              NodoInstruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoInstruccion n1 = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n2 = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n1.setSiguiente(n2); RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= INSTRUCCION 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECVAR 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIG 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= BIF 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIf n = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= BIFELSE 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BWHILE 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= BSWITCH 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= LLPROC 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BDECLARE ::= DECLARE CABECERAS 
            {
              NodoDeclare RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCabecera n = (NodoCabecera)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDeclare(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDECLARE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BDECLARE ::= DECLARE 
            {
              NodoDeclare RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDeclare(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDECLARE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CABECERAS ::= CABECERA CABECERAS 
            {
              NodoCabecera RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCabecera n1 = (NodoCabecera)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCabecera n2 = (NodoCabecera)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n1.setSiguiente(n2); RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CABECERAS ::= CABECERA 
            {
              NodoCabecera RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCabecera n = (NodoCabecera)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CABECERA ::= CABECERAF 
            {
              NodoCabecera RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCabecera n = (NodoCabecera)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CABECERA ::= CABECERAP 
            {
              NodoCabecera RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCabecera n = (NodoCabecera)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CABECERAF ::= TIPO IDFP PARENTESISAPERTURA TARGS PARENTESISCIERRE PUNTOCOMA 
            {
              NodoCabecera RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoInsertaTipoArg n2 = (NodoInsertaTipoArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoCabecera(t1.lexema(), t1.fila(), t1.columna(), n1, null, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CABECERAF ::= TIPO IDFP PARENTESISAPERTURA PARENTESISCIERRE PUNTOCOMA 
            {
              NodoCabecera RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoCabecera(t1.lexema(), t1.fila(), t1.columna(), n1, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CABECERAP ::= PROC IDFP PARENTESISAPERTURA TARGS PARENTESISCIERRE PUNTOCOMA 
            {
              NodoCabecera RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoInsertaTipoArg n = (NodoInsertaTipoArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t5 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoCabecera(t2.lexema(), t2.fila(), t2.columna(), null, null, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CABECERAP ::= PROC IDFP PARENTESISAPERTURA PARENTESISCIERRE PUNTOCOMA 
            {
              NodoCabecera RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t5 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoCabecera(t2.lexema(), t2.fila(), t2.columna(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= BOOL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= CHAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= INT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= REAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TARGS ::= TIPO 
            {
              NodoInsertaTipoArg RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInsertaTipoArg(n, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TARGS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TARGS ::= TIPO DECDIMS 
            {
              NodoInsertaTipoArg RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoDecDim n2 = (NodoDecDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInsertaTipoArg(n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TARGS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TARGS ::= TIPO COMA TARGS 
            {
              NodoInsertaTipoArg RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInsertaTipoArg n2 = (NodoInsertaTipoArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInsertaTipoArg(n1, null, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TARGS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TARGS ::= TIPO DECDIMS COMA TARGS 
            {
              NodoInsertaTipoArg RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoDecDim n2 = (NodoDecDim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInsertaTipoArg n3 = (NodoInsertaTipoArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInsertaTipoArg(n1, n2, n3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TARGS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BDEFINE ::= DEFINE IMPLEMENTACIONES 
            {
              NodoDefine RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoImplementacion n = (NodoImplementacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDefine(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDEFINE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BDEFINE ::= DEFINE 
            {
              NodoDefine RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDefine(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDEFINE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPLEMENTACIONES ::= IMPLEMENTA IMPLEMENTACIONES 
            {
              NodoImplementacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoImplementacion n1 = (NodoImplementacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoImplementacion n2 = (NodoImplementacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n1.setSiguiente(n2); RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTACIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMPLEMENTACIONES ::= IMPLEMENTA 
            {
              NodoImplementacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoImplementacion n = (NodoImplementacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTACIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMPLEMENTA ::= IMPLEMENTAF 
            {
              NodoImplementacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoImplementacion n = (NodoImplementacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPLEMENTA ::= IMPLEMENTAP 
            {
              NodoImplementacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoImplementacion n = (NodoImplementacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPLEMENTAF ::= IDFP PARENTESISAPERTURA ARGS PARENTESISCIERRE BLOQUER 
            {
              NodoImplementacion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoInsertaNombreArg n1 = (NodoInsertaNombreArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloqueReturn n2 = (NodoBloqueReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoImplementacionF(t1.lexema(), t1.fila(), t1.columna(), n2, n1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTAF",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPLEMENTAF ::= IDFP PARENTESISAPERTURA PARENTESISCIERRE BLOQUER 
            {
              NodoImplementacion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloqueReturn n2 = (NodoBloqueReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoImplementacionF(t1.lexema(), t1.fila(), t1.columna(), n2, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTAF",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGS ::= ID 
            {
              NodoInsertaNombreArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInsertaNombreArg(t.lexema(), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARGS ::= ID COMA ARGS 
            {
              NodoInsertaNombreArg RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInsertaNombreArg n = (NodoInsertaNombreArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInsertaNombreArg(t1.lexema(), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BRETURN ::= RETURN EXP PUNTOCOMA 
            {
              NodoReturn RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion n = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoReturn(t1.fila(), t1.columna(), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRETURN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMPLEMENTAP ::= IDFP PARENTESISAPERTURA ARGS PARENTESISCIERRE BLOQUEI 
            {
              NodoImplementacion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoInsertaNombreArg n1 = (NodoInsertaNombreArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n2 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoImplementacionP(t1.lexema(), t1.fila(), t1.columna(), n2, n1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTAP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMPLEMENTAP ::= IDFP PARENTESISAPERTURA PARENTESISCIERRE BLOQUEI 
            {
              NodoImplementacion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n2 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoImplementacionP(t1.lexema(), t1.fila(), t1.columna(), n2, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTAP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BMAIN ::= START INSTRUCCIONES END 
            {
              NodoBloque RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBloque(n, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BMAIN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BMAIN ::= START END 
            {
              NodoBloque RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBloque(null, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BMAIN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= E1 OP0 EXP 
            {
              NodoExpresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExp1 n1 = (NodoExp1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOp0 n2 = (NodoOp0)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion n3 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n2.setExpresion1(n3); n2.setExpresion2(n1); RESULT = n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= E1 
            {
              NodoExpresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp1 n = (NodoExp1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 OP1 E1 
            {
              NodoExp1 RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExp2 n1 = (NodoExp2)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOp1 n2 = (NodoOp1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp1 n3 = (NodoExp1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n2.setExpresion1(n3); n2.setExpresion2(n1); RESULT = n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E2 
            {
              NodoExp1 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp2 n = (NodoExp2)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 OP2 E2 
            {
              NodoExp2 RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExp3 n1 = (NodoExp3)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOp2 n2 = (NodoOp2)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp2 n3 = (NodoExp2)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n2.setExpresion1(n3); n2.setExpresion2(n1); RESULT = n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= E3 
            {
              NodoExp2 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp3 n = (NodoExp3)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 OP3 E3 
            {
              NodoExp3 RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExp4 n1 = (NodoExp4)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOp3 n2 = (NodoOp3)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp3 n3 = (NodoExp3)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n2.setExpresion1(n3); n2.setExpresion2(n1); RESULT = n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E3 ::= E4 
            {
              NodoExp3 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp4 n = (NodoExp4)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= OP4 E4 
            {
              NodoExp4 RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOp4 n1 = (NodoOp4)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp4 n2 = (NodoExp4)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n1.setExpresion(n2); RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= E5 
            {
              NodoExp4 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExp5 n = (NodoExp5)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= IDVAR 
            {
              NodoExp5 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIdVar n = (NodoIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= IDFP PARENTESISAPERTURA ARGSLLAMADA PARENTESISCIERRE 
            {
              NodoExp5 RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoArgumento n = (NodoArgumento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoLlamadaF(t1.fila(), t1.columna(), t1.lexema(), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= IDFP PARENTESISAPERTURA PARENTESISCIERRE 
            {
              NodoExp5 RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoLlamadaF(t1.fila(), t1.columna(), t1.lexema(), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= ELEM 
            {
              NodoExp5 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoElem n = (NodoElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= PARENTESISAPERTURA EXP PARENTESISCIERRE 
            {
              NodoExp5 RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion n = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoParentesis(t1.fila(), t1.columna(), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP0 ::= EQ 
            {
              NodoOp0 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoEQ("==", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP0 ::= NEQ 
            {
              NodoOp0 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNEQ("!=", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP0 ::= LET 
            {
              NodoOp0 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoLET("<=", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP0 ::= GET 
            {
              NodoOp0 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoGET(">=", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP0 ::= LT 
            {
              NodoOp0 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoLT("<", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP0 ::= GT 
            {
              NodoOp0 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoGT(">", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP1 ::= MAS 
            {
              NodoOp1 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoMas("+", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP1 ::= MENOS 
            {
              NodoOp1 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoMenos("-", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP1 ::= OR 
            {
              NodoOp1 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoOr("||", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP2 ::= POR 
            {
              NodoOp2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoPor("*", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP2 ::= DIV 
            {
              NodoOp2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDiv("/", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP2 ::= MOD 
            {
              NodoOp2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoMod("%", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2 ::= AND 
            {
              NodoOp2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAnd("&&", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP3 ::= POW 
            {
              NodoOp3 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoPow("^", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP4 ::= MENOS 
            {
              NodoOp4 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoMenosUnario("-", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP4 ::= NOT 
            {
              NodoOp4 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNot("~", t.fila(), t.columna()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELEM ::= INTELEMENT 
            {
              NodoElem RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoInt("int", Integer.parseInt(t.lexema())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELEM ::= REALELEMENT 
            {
              NodoElem RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoReal("float", Float.parseFloat(t.lexema())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEM ::= BOOLELEMENT 
            {
              NodoElem RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoBool("bool", Boolean.parseBoolean(t.lexema())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEM ::= CHARELEMENT 
            {
              NodoElem RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoChar("char", t.lexema().charAt(1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IDVAR ::= ID 
            {
              NodoIdVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoVaruse(t.fila(), t.columna(), t.lexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDVAR",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IDVAR ::= ID DIMS 
            {
              NodoIdVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoDim n = (NodoDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n.setIdVar(new NodoVaruse(t.fila(), t.columna(), t.lexema())); RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDVAR",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGSLLAMADA ::= EXP 
            {
              NodoArgumento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion n = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoArgumento(n.getFila(), n.getColumna(), n, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSLLAMADA",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARGSLLAMADA ::= EXP COMA ARGSLLAMADA 
            {
              NodoArgumento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion n1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArgumento n2 = (NodoArgumento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoArgumento(n1.getFila(), n1.getColumna(), n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSLLAMADA",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECVAR ::= TVAR 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoInstruccion n = (NodoInstruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TVAR ::= TIPO ID PUNTOCOMA 
            {
              NodoInstruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDecTVar(t1.lexema(), t1.fila(), t1.columna(), n, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TVAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TVAR ::= TIPO DECDIMS ID PUNTOCOMA 
            {
              NodoInstruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoDecDim n2 = (NodoDecDim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDecTVar(t1.lexema(), t1.fila(), t1.columna(), n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TVAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECDIMS ::= DECDIM DECDIMS 
            {
              NodoDecDim RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoDecDim n1 = (NodoDecDim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoDecDim n2 = (NodoDecDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n1.setSiguiente(n2); RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECDIMS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECDIMS ::= DECDIM 
            {
              NodoDecDim RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoDecDim n = (NodoDecDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECDIMS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECDIM ::= CORCHETEAPERTURA INTELEMENT CORCHETECIERRE 
            {
              NodoDecDim RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDecDim(Integer.parseInt(t2.lexema())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECDIM",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DIMS ::= DIM DIMS 
            {
              NodoDim RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoDim n1 = (NodoDim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoDim n2 = (NodoDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n2.setIdVar(n1); RESULT = n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMS",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DIMS ::= DIM 
            {
              NodoDim RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoDim n = (NodoDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMS",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DIM ::= CORCHETEAPERTURA EXP CORCHETECIERRE 
            {
              NodoDim RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion n = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDim(t1.fila(), t1.columna(), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIG ::= IDVAR IGUAL EXP PUNTOCOMA 
            {
              NodoInstruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoIdVar n1 = (NodoIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion n2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAsignacion(t1.fila(), t1.columna(), n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BIF ::= IF PARENTESISAPERTURA EXP PARENTESISCIERRE BLOQUEI 
            {
              NodoIf RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion n1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n2 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoIf(t1.fila(), t1.columna(), n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BIFELSE ::= BIF ELSE BLOQUEI 
            {
              NodoInstruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoIf n1 = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n2 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoIfElse(n1.getFila(), n1.getColumna(), n1.getExpresion(), n1.getBloque(), n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BIFELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BWHILE ::= WHILE PARENTESISAPERTURA EXP PARENTESISCIERRE BLOQUEI 
            {
              NodoInstruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion n1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n2 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoWhile(t1.fila(), t1.columna(), n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BSWITCH ::= SWITCH PARENTESISAPERTURA EXP PARENTESISCIERRE CASES DEFAULT DOSPUNTOS BLOQUEI 
            {
              NodoInstruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoExpresion n1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoCase n2 = (NodoCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t5 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n3 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoSwitch(t1.fila(), t1.columna(), n1, n2, new NodoDefault(t4.fila(), t4.columna(), n3)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BSWITCH",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BSWITCH ::= SWITCH PARENTESISAPERTURA EXP PARENTESISCIERRE DEFAULT DOSPUNTOS BLOQUEI 
            {
              NodoInstruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoExpresion n1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t5 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n2 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoSwitch(t1.fila(), t1.columna(), n1, null, new NodoDefault(t4.fila(), t4.columna(), n2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BSWITCH",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASES ::= CASE INTELEMENT DOSPUNTOS BLOQUEI CASES 
            {
              NodoCase RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBloque n1 = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCase n2 = (NodoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoCase(t1.fila(), t1.columna(), Integer.parseInt(t2.lexema()), n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASES ::= CASE INTELEMENT DOSPUNTOS BLOQUEI 
            {
              NodoCase RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBloque n = (NodoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoCase(t1.fila(), t1.columna(), Integer.parseInt(t2.lexema()), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LLPROC ::= IDFP PARENTESISAPERTURA ARGSLLAMADA PARENTESISCIERRE PUNTOCOMA 
            {
              NodoInstruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoArgumento n = (NodoArgumento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoLlamadaP(t1.fila(), t1.columna(), t1.lexema(), n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLPROC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LLPROC ::= IDFP PARENTESISAPERTURA PARENTESISCIERRE PUNTOCOMA 
            {
              NodoInstruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t3 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t4 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoLlamadaP(t1.fila(), t1.columna(), t1.lexema(), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLPROC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
